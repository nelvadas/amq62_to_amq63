---
# This playbook is used to create k8s cronjob in project namespaces
   #  Usage  ansible-playbook -i hosts upgrate_amq62_to_amq63.yaml
   #                       -e "namespace=myProject" \
   #                       -e "image=d1g1tal/lmde:dev" \
   #                       -e "buildConfig=mybc" \
   #                       -e "deploymentConfig=dc"
   #		           -e "createDrainer=false"
   #                       -e "oc_cluster=https://mycluster:8443"
   #                       -e "oc_user=admin"
   #                       -e "oc_password=admin"
  # Sample command line
  #         ansible-playbook -i hosts  upgrate_amq62_to_amq63.yaml -e namespace=myProject -e buildConfig=test-bc -e deploymentConfig=test-dc -e image='jboss-amq-63:1.1' \
  #
- hosts: localhost
  vars:
    ocp_cluster: "{{oc_cluster|default('https://192.168.99.100:8443')}}"
    ocp_cluster_user: "{{oc_user|default('admin')}}"
    ocp_cluster_pwd: "{{oc_password|default('admin')}}"
    tmp_dir:  "./tmp/{{namespace}}/{{ansible_date_time.epoch}}"
  tasks:

  - name: "Check project namespace "
    fail:
      msg: " project namespace is mandatory: -e namespace=xxx"
    when: namespace is not defined

  - name: "Check Build and Deployment Config"
    fail:
      msg: " Please specify the build and deployment config you want to update"
    when: (deploymentConfig is not defined )or ( buildConfig is not defined) 
 
  - name: "oc login "
    command: "oc login {{ocp_cluster}} -u {{ocp_cluster_user}} -p {{ocp_cluster_pwd}}  -n {{namespace}}"
    register: result
        

  - name: "Check who am I"
    command: oc whoami
    register: oc_whoami
    ignore_errors: True
    changed_when: false
 
  - fail:
      msg: "This playbook requires to be system:admin"
    when: "oc_whoami.stdout != 'admin' and oc_whoami.stdout != 'system:admin'"


  - name: "Ensure objects exists in project {{namespace}} "
    command: " oc get {{ item }} -n {{namespace}}  "
    register: oc_get_obj
    failed_when: "'No resources found' in oc_get_obj.stderr"
    with_items:
     - "dc/{{deploymentConfig}}"
     - "bc/{{buildConfig}}"

  - name: "Create Backup {{tmp_dir}} directory"
    file:
      path: "{{tmp_dir}}"
      state: directory
  

  - name: "Back up existing objects before patching "
    shell: " oc get {{ item.kind }}/{{ item.name }} -n {{namespace}} -o yaml  > {{tmp_dir}}/{{ item.kind }}_{{ item.name }}.yaml"
    register: oc_backup
    failed_when: "'No resources found' in oc_backup.stderr"
    with_items:
      - { name: "{{deploymentConfig}}", kind: "dc"}
      - { name: "{{ buildConfig}}",kind: "bc"}

  - name: "Create AMQ Service Account"
    command: "oc create sa amq-service-account -n {{ namespace }}"
    ignore_errors: True

  - name: "Grant view access to amq-service-account in project {{namespace}}"
    command: "oc policy add-role-to-user view system:serviceaccount:{{namespace}}:amq-service-account"
    ignore_errors: True 

  - name: "Patching the Build config with new AMQ image :  {{image}} "
    shell: "./scripts/patchBuildConfig.sh {{buildConfig}} '{{image}}' {{namespace}}"
    register: oc_patch_bc_result


  - name: "Patching the Deployment config with the amq-service-account "
    shell: "./scripts/patchDeploymentConfig.sh {{ deploymentConfig }} 'amq-service-account' {{namespace}}"
    register: oc_patch_dc_result

  - name: "Get AMQ environment variables AMQ_USER"
    shell: "oc env dc/{{ deploymentConfig }} --list  -n {{namespace}} | grep AMQ_USER | awk -F= '{ print $2 }'"
    register: amquser

  - name: "Get AMQ environment variables AMQ_PASSWORD" 
    shell: "oc env dc/{{ deploymentConfig }} --list -n {{namespace}} | grep AMQ_PASSWORD | awk -F= '{ print $2 }'"
    register: amqpwd

  - name: "Get AMQ environment variable AMQ_MESH_SERVICE_NAME"
    shell: "oc env dc/{{ deploymentConfig }} --list -n {{namespace}} | grep AMQ_MESH_SERVICE_NAME | awk -F= '{ print $2 }'"
    register: amqmeshsvc

  - name: " Get Persistence Volume Clain defined on dc/{{ deploymentConfig }}"
    shell: "oc get dc/{{ deploymentConfig }} -o yaml -n {{namespace}} | grep 'claimName:' | awk -F: '{ print $2 }'"
    register: pvc

  - name: "Parameterized drainer template {{ deploymentConfig }}-drainer.yaml"
    template:
      src: "./templates/j2/drainer-amq63.j2"
      dest: "{{tmp_dir}}/{{deploymentConfig}}-drainer.yaml"
    with_items:
      - { dc: "{{deploymentConfig}}",image: "{{image}}",amquser: "{{amquser.stdout}}",amqpassword: "{{amqpwd.stdout}}",amqmeshservice: "{{amqmeshsvc.stdout}}",pvc: "{{pvc.stdout}}"  }

  - name: "Create Drainer DC"
    command: "oc create -f {{tmp_dir}}/{{deploymentConfig}}-drainer.yaml -n {{namespace}}"
    register: oc_create_drainer_resp








